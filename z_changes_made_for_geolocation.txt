1. Database Changes to Reverse

A. Remove these 2 columns from login_history Table

    latitude DECIMAL(10, 8) NULL,
    longitude DECIMAL(11, 8) NULL

These 2 columns were created specifically for tracking location.

-----

2. Controller Changes to Reverse (Controller.php)

A. Remove the update_location() Method

Delete the entire method added to handle the AJAX call for GPS coordinates.

Code to Delete:

// Remove this entire method from Controller.php

public function update_location()
{
    // Ensure this is an AJAX request and the user is logged in
    if (!isset($_SESSION['logged_in']) || $_SESSION['logged_in'] !== true || !isset($_POST['lat']) || !isset($_POST['lon'])) {
        http_response_code(403); // Forbidden
        exit;
    }

    $history_id = $_SESSION['history_id'] ?? null;
    $latitude = (float)$_POST['lat'];
    $longitude = (float)$_POST['lon'];

    if ($history_id) {
        $update_data = [
            'latitude' => $latitude,
            'longitude' => $longitude
        ];
        
        // Use a simple Model method to update the record
        $this->model->updateData('login_history', $update_data, ['history_id' => $history_id]);
    }
    
    // Send a simple response back to the browser
    echo json_encode(['status' => 'success']);
    exit;
}

B. Remove Tracking and Session Variable from login()

In the Controller::login() method, delete all the lines responsible for capturing the IP, creating the history entry, and setting the session ID (history_id).

Code to Delete (inside the Controller::login()):

$ip_address = $_SERVER['REMOTE_ADDR'];

$history_data = [
    'user_id'    => $user->user_id,
    'login_time' => date('Y-m-d H:i:s'),
    'ip_address' => $ip_address,
    // latitude/longitude will be NULL for now, updated later by JS
    'latitude'   => null, ----------------------------------------------------------this one
    'longitude'  => null  ----------------------------------------------------------this one
];

// Insert the history record and get the ID of the new row
$history_id = $this->model->insertData('login_history', $history_data);

// Store the history ID in the session to update location later
$_SESSION['history_id'] = $history_id;

-----

3. Router Changes to Reverse (Main Router File)

A. Remove the update_location Route

// Remove this case from your router's switch statement

case 'update_location' : 
    $Controller->update_location();
    break;

-----

4. View Changes to Reverse (`app/views/index.php`)

A. Remove the JavaScript Block

The geolocation functionality is contained within a specific `<script>` tag and a PHP `unset()` call at the bottom of your protected `index.php` view.

Code to Delete (from app/views/index.php):

// Remove this entire JavaScript and PHP block from index.php

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Only attempt location capture if a history ID exists
    const historyId = <?php echo json_encode($_SESSION['history_id'] ?? null); ?>;

    if (!historyId) {
        return; // Already captured or not set
    }

    // "Not strict" GPS capture: Ask once and don't worry if it fails
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            function(position) {
                const lat = position.coords.latitude;
                const lon = position.coords.longitude;

                // Send data back to the server using a background request
                fetch('update_location', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `lat=${lat}&lon=${lon}`
                })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        console.log('Location updated successfully.');
                    }
                })
                .catch(error => {
                    console.error('Error sending location:', error);
                });
            },
            function(error) {
                // User denied geolocation permission or GPS failed.
                console.warn('Geolocation failed:', error.message);
            }
        );
    }
});
</script>
<?php
    // Clear the history ID immediately after it's passed to JS
    unset($_SESSION['history_id']);
?>
